# WizyVision Schema Generator

A Python application that generates JSON schemas for WizyVision applications using Google's Gemini AI. This tool uses Chain-of-Thought reasoning to create valid, structured schemas based on natural language descriptions of your application requirements.

## Features

- **AI-Powered Schema Generation**: Uses Google Gemini 2.5 Flash to generate JSON schemas from natural language descriptions
- **WizyVision Type System**: Supports all WizyVision field types with proper validation
- **Chain-of-Thought Reasoning**: Implements structured reasoning to ensure high-quality schema generation
- **Automatic Validation**: Validates generated schemas against JSON Schema Draft 7 and WizyVision type contracts
- **Retry Logic**: Includes retry mechanisms for improved reliability
- **Interactive CLI**: User-friendly command-line interface with help, examples, and predefined templates
- **Predefined Field Templates**: Built-in field structures for common use cases

## Supported Field Types

The generator supports the following WizyVision field types (`x-wv-type`):

| Type | Description | JSON Schema Type |
|------|-------------|------------------|
| **Toggle** | Boolean switch (yes/no) | `boolean` |
| **Checkbox** | Multi-select from defined values | `array` of strings |
| **Date** | Date or date-time string | `string` with format |
| **Number** | Numeric value | `number` or `integer` |
| **Location** | Geolocation with lat/lng | `object` with coordinates |
| **Dropdown** | Single selection from defined values | `string` with enum |
| **Text** | Single-line text | `string` |
| **Paragraph** | Multi-line text | `string` |
| **People** | Single user selection | `string` (userId) |
| **People List** | Multiple user selection | `array` of strings (userIds) |
| **Signature Field** | Signature data | `string` |

## Prerequisites

- Python 3.7 or higher
- Google Gemini API key

## Installation

1. **Clone or download the project files**

2. **Install required dependencies**:
   ```bash
   pip install google-generativeai python-dotenv jsonschema
   ```

3. **Set up your API key**:
   - Copy `env_template.env` to `.env`
   - Replace the placeholder API key with your actual Google Gemini API key:
   ```bash
   cp env_template.env .env
   ```
   - Edit `.env` and replace `your_api_key_here` with your actual API key

## Usage

### Running the Application

```bash
python wv-app-assist-v1.py
```

### Interactive Commands

Once the application is running, you can use these commands:

- **Generate a schema**: Describe your application requirements in natural language
- **`example`**: View an example schema
- **`predefined`**: View the complete predefined schema with all standard fields
- **`templates`**: List available predefined field templates
- **`help`**: Show available field types and descriptions
- **`exit`**: Quit the application

### Example Usage

```
Enter your request for a WizyVision schema: Create a schema for incident reports with severity levels

Generating schema (attempt 1/3)...
âœ… Schema generated successfully on attempt 1

=== Generated Schema ===
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "priority": {
      "type": "string",
      "enum": ["Low", "Medium", "High"],
      "x-wv-type": "Dropdown"
    },
    "details": {
      "type": "string",
      "minLength": 10,
      "x-wv-type": "Paragraph"
    },
    "isResolved": {
      "type": "boolean",
      "default": false,
      "x-wv-type": "Toggle"
    },
    "assignee": {
      "type": "string",
      "x-wv-type": "People"
    },
    "watchers": {
      "type": "array",
      "items": {"type": "string"},
      "x-wv-type": "People List"
    },
    "scheduledAt": {
      "type": "string",
      "format": "date-time",
      "x-wv-type": "Date"
    }
  },
  "required": ["priority", "details"]
}
```

## How It Works

### Chain-of-Thought Process

The application uses a structured reasoning approach:

1. **Analyze the Use Case**: Understand the core purpose and domain
2. **Identify Required Fields**: Determine essential data fields
3. **Select Field Types**: Match requirements to appropriate WizyVision types
4. **Define Validation Rules**: Set constraints and requirements
5. **Consider Workflow**: Add status tracking, assignments, audit trails
6. **Finalize Schema**: Ensure compliance and structure

### Predefined Field Templates

The application includes predefined field structures for common use cases:

- **postRef**: Unique case identifier (Text)
- **typeId**: Application ID (Text)
- **statusId**: Status tracking with open/closed options (Dropdown)
- **privacyId**: Privacy controls (Dropdown)
- **description**: Detailed descriptions (Paragraph)
- **tags**: Categorization (Checkbox array)
- **assignedTo**: User assignment (People)
- **memId**: Creator tracking (People, auto-populated)
- **createdAt**: Creation timestamp (Date, auto-populated)
- **updatedAt**: Update timestamp (Date, auto-updated)

### Validation

Generated schemas are automatically validated for:

- JSON Schema Draft 7 compliance
- Proper WizyVision type declarations
- Structural contract adherence
- Required field definitions
- Type consistency

## Configuration

### Environment Variables

- `GEMINI_API_KEY`: Your Google Gemini API key (required)

### API Key Setup

1. Visit [Google AI Studio](https://makersuite.google.com/app/apikey)
2. Create a new API key
3. Add it to your `.env` file

## Error Handling

The application includes robust error handling:

- **Retry Logic**: Automatically retries failed generations
- **JSON Validation**: Ensures generated output is valid JSON
- **Schema Validation**: Validates against WizyVision type contracts
- **Graceful Degradation**: Provides helpful error messages and suggestions

## Examples

### Incident Management
```
"Create a schema for incident reports with severity levels, assignee tracking, and resolution status"
```

### Project Management
```
"Generate a schema for project tasks with priority, due dates, assigned team members, and completion tracking"
```

### Inventory Management
```
"Create a schema for inventory items with categories, quantities, locations, and reorder thresholds"
```

## Troubleshooting

### Common Issues

1. **API Key Error**: Ensure your `.env` file contains a valid `GEMINI_API_KEY`
2. **Invalid Schema**: Try rephrasing your request to be more specific
3. **Generation Failures**: The app will retry automatically; if it persists, try simplifying your request

### Getting Better Results

- Be specific about the type of application you're building
- Mention key fields and their purposes
- Include workflow requirements (status tracking, assignments, etc.)
- Use clear, descriptive language

## Contributing

This is a prototype application. For improvements or bug reports, please ensure:

- All generated schemas pass validation
- WizyVision type contracts are respected
- JSON Schema Draft 7 compliance is maintained

## License

This project is a prototype for WizyVision schema generation.

---

**Note**: This tool is designed specifically for WizyVision applications and enforces the WizyVision type system. Generated schemas include the `x-wv-type` property for each field to ensure compatibility with the WizyVision platform.
